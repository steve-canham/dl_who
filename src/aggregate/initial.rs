
// This code not routinely ran
// Included here as it represents the 
// initialisation of the system. 

// Can therefore be ran as a sql script, in whole or in part, 
// if ever desired, rather than as part of the program

/*

drop table if exists der.who_file_contents;
CREATE TABLE der.who_file_contents (
	id int4 primary key  GENERATED ALWAYS AS IDENTITY (START 100001 INCREMENT BY 1) NOT NULL,
	file_path varchar NULL,
	source_id int4 NULL,
	num_found int4 NULL,
	dt_added timestamptz default now()
);
CREATE INDEX wh_srce ON der.who_file_contents USING btree (source_id);


drop table if exists der.who_file_dls;
CREATE TABLE der.who_file_dls (
	id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 10001 MAXVALUE 2147483647 START 10001 CACHE 1 NO CYCLE) NOT NULL,
	dl_id int4 NULL,
	file_path varchar NULL,
	date_dl date NULL,
	num_checked int4 NULL,
	num_downloaded int4 NULL,
	num_added int4 NULL,
	CONSTRAINT who_file_dls_pkey PRIMARY KEY (id)
);


drop table if exists bas.anzctr;
create table bas.anzctr (
	  id int4 primary key GENERATED BY DEFAULT AS IDENTITY (START WITH 1000001 INCREMENT BY 1) NOT NULL
	, source_id                 int4 null
	, sd_sid                    varchar NULL
	, title                     varchar NULL
	, remote_url                varchar null
	, study_type                int4 null
    , study_status              int4 null
    
    , reg_sec_ids               varchar[] null
    , oth_sec_ids               varchar[] null
    
    , reg_year                  int4 null
    , reg_month                 int4 null
    , reg_day                   int4 null

    , enrol_year                int4 null
    , enrol_month               int4 null
	, enrol_day                 int4 null
	
    , results_yes_no            varchar null
    , results_url_link          varchar null
    , results_url_protocol      varchar null
    , results_date_posted       date null
    , results_date_first_pub    date null
    , results_date_completed    date null
    
    , country_list              varchar[] null
    , in_eu                     bool default false
    , in_na                     bool default false
    , in_sa                     bool default false
    , in_af                     bool default false
    , in_as                     bool default false
    , in_oc                     bool default false
    
    , last_revised_in_who       date null
    , last_edited_in_sys        timestamptz null
    , duplicate                 bool default false
);
CREATE UNIQUE INDEX anzctr_bas_sid_idx ON bas.anzctr USING btree (sd_sid);

drop table if exists bas.ctg_lt_2010;
CREATE TABLE bas.ctg_lt_2010 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctg_lt_2010 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1); 

drop table if exists bas.ctg_2010_14;
CREATE TABLE bas.ctg_2010_14 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctg_2010_14 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.ctg_2015_19;
CREATE TABLE bas.ctg_2015_19 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctg_2015_19 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
	
drop table if exists bas.ctg_2020_24;
CREATE TABLE bas.ctg_2020_24 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctg_2020_24 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
	
drop table if exists bas.ctg_2025_29;
CREATE TABLE bas.ctg_2025_29 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctg_2025_29 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.nntr;
CREATE TABLE bas.nntr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.nntr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

drop table if exists bas.euctr;
CREATE TABLE bas.euctr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.euctr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.ctis;
CREATE TABLE bas.ctis (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctis alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

drop table if exists bas.chictr_lt_2020;
CREATE TABLE bas.chictr_LT_2020 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.chictr_LT_2020 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

drop table if exists bas.chictr_ge_2020;
CREATE TABLE bas.chictr_GE_2020 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.chictr_GE_2020 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

drop table if exists bas.isrctn;
CREATE TABLE bas.isrctn (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.isrctn alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.cris;
CREATE TABLE bas.cris (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.cris alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.ctri_lt_2020;
CREATE TABLE bas.ctri_lt_2020 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctri_lt_2020 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.ctri_ge_2020;
CREATE TABLE bas.ctri_ge_2020 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.ctri_ge_2020 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

drop table if exists bas.drks;
CREATE TABLE bas.drks (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.drks alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.irct;
CREATE TABLE bas.irct (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.irct alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.itmctr;
CREATE TABLE bas.itmctr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.itmctr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.jprn_lt_2020;
CREATE TABLE bas.jprn_lt_2020 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.jprn_lt_2020 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
			
drop table if exists bas.jprn_ge_2020;
CREATE TABLE bas.jprn_ge_2020 (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.jprn_ge_2020 alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.lebctr;
CREATE TABLE bas.lebctr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.lebctr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.pactr;
CREATE TABLE bas.pactr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.pactr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

drop table if exists bas.rebec;
CREATE TABLE bas.rebec (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.rebec alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.rpcec;
CREATE TABLE bas.rpcec (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.rpcec alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.rpuec;
CREATE TABLE bas.rpuec (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.rpuec alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.slctr;
CREATE TABLE bas.slctr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.slctr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)
		
drop table if exists bas.thctr;
CREATE TABLE bas.thctr (LIKE bas.anzctr INCLUDING indexes INCLUDING CONSTRAINTS );  
ALTER table bas.thctr alter id ADD GENERATED ALWAYS AS IDENTITY (START WITH 1000001 INCREMENT BY 1)

*/